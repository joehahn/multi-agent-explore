#!/usr/bin/env python

#multi_agent.py
#
#by Joe Hahn
#jmh.datasciences@gmail.com
#10 February 2018
#
#helper functions for an experiment with Q-learning on system having multiple agents 

#imports
import numpy as np
import pandas as pd
import random
import copy
from collections import deque

#initialize the environment = dict containing all constants that describe the system
def initialize_environment(rn_seed, max_turns, N_buckets, N_agents):
    random.seed(rn_seed)
    p0 = np.linspace(0.0, 0.01, num=N_buckets)
    sigma = np.sqrt(p0)
    #torpedo one-eighth of middle buckets with negative values of p0
    one_third = N_buckets/3
    p0[one_third : one_third + one_third/8] *= -1.0
    #torpedo one-fourth of the high-end buckets
    p0[-one_third/4:] *= -1.35
    bucket_params = {'p0':p0, 'sigma':sigma}
    environment = {'rn_seed':rn_seed, 'max_turns':max_turns, 'N_buckets':N_buckets,
        'N_agents':N_agents, 'bucket_params':bucket_params}
    return environment

#initial state
def initialize_state(environment):
    N_buckets = environment['N_buckets']
    N_agents = environment['N_agents']
    bucket_params = environment['bucket_params']
    all_locations = range(N_buckets)
    agent_locations = np.random.choice(all_locations, size=N_agents, replace=False)
    action2locations = {}
    state = {'agent_locations':agent_locations}
    state['agent_value'] = np.ones(N_agents)
    state['bucket_productivity'] = bucket_productivity(environment)
    state['previous_bucket_productivity'] = bucket_productivity(environment)
    state['action2locations'] = action2locations
    return state

#increment time and update bucket rewards
def bucket_productivity(environment):
    p0 = environment['bucket_params']['p0']
    sigma = environment['bucket_params']['sigma']
    bucket_productivity = np.random.normal(loc=p0, scale=sigma)
    idx = (bucket_productivity < -1.0)
    bucket_productivity[idx] = -1.0
    return bucket_productivity

#reward = sum of rewards generated by all occupied buckets
def get_reward(state):
    agent_locations = state['agent_locations']
    agent_value = state['agent_value']
    bucket_productivity = state['bucket_productivity']
    bucket_value = bucket_productivity[agent_locations]
    reward = (agent_value*(1.0 + bucket_value)).sum()
    return reward, bucket_value

#update bucket productivities and increment agent values
def update_state(state, bucket_value, environment):
    state_updated = copy.deepcopy(state)
    state_updated['previous_bucket_productivity'] = state_updated['bucket_productivity']
    state_updated['bucket_productivity'] = bucket_productivity(environment)
    agent_value = state_updated['agent_value']
    agent_value *= 1.0 + bucket_value
    state_updated['agent_value'] = agent_value
    return state_updated

#convert state into a numpy array of agent locations, agent values,
#and previous_bucket_productivity
def state2vector(state, environment):
    N_agents = environment['N_agents']
    N_buckets = environment['N_buckets']
    agent_locations = state['agent_locations']
    agent_value = state['agent_value']
    previous_bucket_productivity = state['previous_bucket_productivity']
    locations = np.zeros(N_buckets)
    for idx in range(N_agents):
        loc = agent_locations[idx]
        locations[loc] += 1.0
    v = np.concatenate([locations, agent_value, previous_bucket_productivity])
    return v.reshape(1, len(v))

#move agents
def move_agents(state, environment, strategy):
    state_moved = copy.deepcopy(state)
    if (strategy == 'smart'):
        #use neural net to select best action
        action = 0
    else:
        #set action=0 and move agents quasi-randomly
        N_buckets = environment['N_buckets']
        N_agents = environment['N_agents']
        all_locations = range(N_buckets)
        one_third = N_buckets/3
        two_third = 2*N_buckets/3
        if (strategy == 'random'):
            #agents move to buckets randomly selected
            allowed_locations = all_locations 
        if (strategy == 'low'):
            #agents move to buckets randomly selected from lower third
            allowed_locations = all_locations[0:one_third]
        if (strategy == 'middle'):
            #agents move to buckets randomly selected from middle third
            allowed_locations = all_locations[one_third+1:two_third]
        if (strategy == 'high'):
            #agents move to buckets randomly selected from upper third
            allowed_locations = all_locations[two_third+1:]
        if (strategy == 'best'):
            #agents move to bucket having highest p0
            p0 = environment['bucket_params']['p0']
            allowed_locations = [p0.argmax()]
        locations = np.random.choice(allowed_locations, size=N_agents, replace=True)
        action = 0
        action2locations = {action:locations}
        state_moved['action2locations'] = action2locations
    #update agent_locations
    state_moved['agent_locations'] = state_moved['action2locations'][action]
    return state_moved, action

#check game state = running, or too many moves
def get_game_state(turn, environment):
    game_state = 'running'
    max_turns = environment['max_turns']
    if (turn >= max_turns):
        game_state = 'max_turns'
    return game_state

#play one game using indicated strategy
def play_one_game(environment, strategy, model=None):
    turn = 0
    N_agents = environment['N_agents']
    N_buckets = environment['N_buckets']
    memories_list = []
    state = initialize_state(environment)
    game_state = get_game_state(turn, environment)
    while (game_state == 'running'):
        #move agents per strategy
        state_moved, action = move_agents(state, environment, strategy)
        #get reward and bucket value
        reward, bucket_value = get_reward(state_moved)
        #update agents health and bucket_productivities
        state_next = update_state(state_moved, bucket_value, environment)
        memory = (turn, state, action, state_next, reward, game_state)
        memories_list += [memory]
        state = copy.deepcopy(state_next)
        turn += 1
        game_state = get_game_state(turn, environment)
    #generate memories queue
    N_memories = len(memories_list)
    memories = deque(maxlen=N_memories)
    for memory in memories_list:
        memories.append(memory)
    return memories   

#convert memories queue into timeseries dataframe
def memories2timeseries(memories, environment):
    turns_list = []
    rewards_list = []
    agent_value_list = []
    N_buckets = environment['N_buckets']
    N_agents = environment['N_agents']
    for memory in memories:
        turn, state, action, state_next, reward, game_state = memory
        turns_list += [turn]
        rewards_list += [reward]
        agent_value = state['agent_value']
        agent_value_dict = {'agent_value_'+str(j):agent_value[j] for j in range(N_agents)}
        agent_value_list += [agent_value_dict]
        #state_vector_next = state2vector(state_next, environment)
        #agent_counts_dict = {'agents_'+str(j):state_vector_next[0, j] for j in range(N_buckets)}
        #agent_counts_list += [agent_counts_dict]
    #d = {'turn':turns, 'action':actions, 'reward':rewards, 'bucket_rewards':bucket_rewards_list,
    #    'agent_counts':agent_counts_list}
    d = {'turn':turns_list, 'reward':rewards_list, 'agent_value':agent_value_list}
    df = pd.DataFrame(d)
    df = pd.concat([df, df['agent_value'].apply(pd.Series)], axis=1)
    cols = ['turn', 'reward']
    cols += [col for col in df.columns if ('agent_value_' in col)]
    return df[cols]

#generate memories of playing multiple random games
def play_N_games(environment, strategy, N_games):
    memories_list = []
    turn = 0
    N_memories = 0
    for N_game in range(N_games):
        memories = play_one_game(environment, turn, strategy)
        memories_list += [memories]
        N_memories += len(memories)
    memories = deque(maxlen=N_memories)
    for game_memories in memories_list:
        for m in game_memories:
            memories.append(m)
    return memories

#build an MLP neural network
def build_model(N_inputs, N_neurons, N_outputs):
    from keras.models import Sequential
    from keras.layers import Dense
    model = Sequential()
    model.add(Dense(N_neurons, activation='relu', input_shape=(N_inputs,)))
    model.add(Dense(N_neurons/2, activation='relu'))
    model.add(Dense(N_outputs, activation='linear'))
    model.compile(loss='mean_squared_error', optimizer='adam')
    return model

# Import `Sequential` from `keras.models`
from keras.models import Sequential

# Import `Dense` from `keras.layers`
from keras.layers import Dense
# Initialize the constructor
model = Sequential()
# Add an input layer 
model.add(Dense(12, activation='relu', input_shape=(11,)))
# Add one hidden layer 
model.add(Dense(8, activation='relu'))
# Add an output layer 
model.add(Dense(1, activation='sigmoid'))

#train model via Q-learning
def train(environment, model, N_games, gamma, memories, actions, batch_size, debug=False):
    epsilon = 1.0
    rewards = []
    epsilons = []
    games = range(N_games)
    for N_game in games:
        turn = 0
        state = initialize_state(environment)
        state_vector = state2vector(state, environment)
        N_inputs = state_vector.shape[1]
        turn = 0
        #ramp epsilon down
        if (epsilon > 0.15):
            epsilon -= 1.0/(0.33*N_games)
        N_agents = environment['N_agents']
        game_state = get_game_state(turn, environment)
        while (game_state == 'running'):
            #move agents
            state_vector = state2vector(state, environment)
            #predict this turn's possible rewards Q
            Q = model.predict(state_vector, batch_size=1)
            #choose best action
            if (np.random.random() < epsilon):
                #choose random action
                action = np.random.choice(environment['actions'])
            else:
                #choose best action
                action = np.argmax(Q)
            #get next state
            state_next = move_agent(state, environment, action)
            state_vector_next = state2vector(state_next, environment)
            #predict next turn's possible rewards
            Q_next = model.predict(state_vector_next, batch_size=1)
            max_Q_next = np.max(Q_next)
            reward = get_reward(state_next)
            #add next turn's discounted reward to this turn's predicted reward
            Q[0, action] = reward + gamma*max_Q_next
            #add to memory queue
            memory = (turn, state, action, state_next, reward, game_state)
            memories.append(memory)
            #update state
            state = copy.deepcopy(state_next)
            #all agents have moved, so increment turn and update bucket rewards
            turn += 1
            state['previous_bucket_rewards'] = state['bucket_rewards']
            state['bucket_rewards'] = get_bucket_rewards(environment, turn)
            game_state = get_game_state(turn, environment)
            #do experience replay ie train model on batch of randomly selected past experiences
            memories_sub = random.sample(memories, batch_size)
            turnz = [m[0] for m in memories_sub]
            statez = [m[1] for m in memories_sub]
            actionz = [m[2] for m in memories_sub]
            statez_next = [m[3] for m in memories_sub]
            rewardz = [m[4] for m in memories_sub]
            game_statez = [m[5] for m in memories_sub]
            state_vectorz_list = [state2vector(s, environment) for s in statez]
            state_vectorz = np.array(state_vectorz_list).reshape(batch_size, N_inputs)
            Qz = model.predict(state_vectorz, batch_size=batch_size)
            state_vectorz_next_list = [state2vector(s, environment) for s in statez_next]
            state_vectorz_next = np.array(state_vectorz_next_list).reshape(batch_size, N_inputs)
            Qz_next = model.predict(state_vectorz_next, batch_size=batch_size)
            for idx in range(batch_size):
                the_reward = rewardz[idx]
                max_Q_next = np.max(Qz_next[idx])
                the_action = actionz[idx]
                Qz[idx, the_action] = the_reward + gamma*max_Q_next
            model.fit(state_vectorz, Qz, batch_size=batch_size, nb_epoch=1, verbose=0)
        #print something when game ends
        if (debug):
            print '======================='
            print 'game number = ', N_game
            print 'turn = ', turn
            print 'agent_locations = ', state_next['agent_locations']
            print 'reward = ', reward
            print 'epsilon = ', epsilon
            print 'game_state = ', game_state
        else:
            print '.',
        rewards += [reward]
        epsilons += [epsilon]
    return model, np.array(games), np.array(rewards), np.array(epsilons) 
